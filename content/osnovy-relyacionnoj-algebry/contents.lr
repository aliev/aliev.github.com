title: Основы реляционной алгебры
---
body:

# 1.1 Как устроена реляционная модель?

База данных это множество именованных отношений - таблиц <small><i>(отношение или relatio фундаментальное понятие в реляционной модели именно поэтому модель называется реляционной - Прим. wiki)</i></small>.

Само по себе отношение является множеством, которое содержит список кортежей  представляющих строки таблицы. Например, если представить таблицу с тремя столбцами (Name, City, Job), то саму таблицу можно показать в виде множества кортежей - строк <small><i>(вообще строки таблицы можно представить в виде именованных кортежей, или namedtuple, где название атрибута это столбец, а его значение - значение столбца соответственно - Прим. авт.)</i></small>:

```python
{
    (Kris, Berlin, Database Designer),
    (Mike, Zurich, SRE),
    (Harald, Berlin, Security Engineer)
}
```

Строки таблицы всегда не упорядочены, так как являются частью множества. Значения же столбцов всегда упорядочены, так как значения являются частью кортежей, а не множества. Тут важно заметить, что выражение ORDER BY в языке SQL не является частью его реляционной алгебры.

Каждые элемент кортежа это именованный атрибут или столбец. Атрибуты имеют тип, который иногда называется доменом. (описать какие типы могут существовать).

Также есть специальное значение, которым может быть установлен столбец любого типа. Это специальное значение именуется NULL, оно играет очень важную роль в реляционных базах данных. NULL используются для обозначения того, что значение может быть неизвестным или неопределенным.

Еще одним важным атрибутом отношения является ключ. Каждое значение такого атрибута должно быть уникальным. У подобных атрибутов есть несколько важных применений. Одно из них - извлечение определенных кортежей. Например, вы можете запросить кортеж по его уникальном ключу. В то же время система баз данных для эффективности строит специальную структуру индексов для более быстрого нахождения кортежей.

Более важное применение ключей это создание связей между кортежами отношений по их уникальному ключу, так как в реляционных базах данных нет концепции указателей.

# 1.2 Важная терминология

* Схема - структурированное описание отношения в базе данных. Схема содержит в себе название отношения, атрибуты этого отношения и типы этих атрибутов.

* Экземпляр - фактическое содержание в данный момент времени. Схема устанавливается заранее, а затем экземпляры данных будут меняться со временем.

# 1.3 Выполнение запросов в реляционных базах данных

Основные шаги в создании и использовании реляционных баз данных.

* Проектирования схемы; создание используя язык DDL (Data Definition Language). Схема содержит структуру отношений и атрибуты этих отношений.

* Начальная загрузка исходных данных

Реляционная алгебра это формальный язык, который формирует основы таких языков, как SQL.

Запросы в реляционных базах данных действуют на отношения, которые так же в свою очередь порождают новые отношения.

Самый простой запрос в реляционной алгебре это запрос самого отношения: $$Relation$$ что вернет копию самого отношения.

# 1.4 Оператор выборки (ограничение)

Оператор выборки служит для фильтрации определенных строк отношений. Оператор обозначается греческой буквой сигма <p>$$\sigma$$</p> с контекстом обозначающим условие, которое используется для фильтрации строк извлеченных из отношения:

<p>$$\sigma_{condition}Relation$$</p>

Например, следующим запросом можно выбрать студентов университета "Stanford" с оценкой больше 3.7 учащихся на факультете "Computer Science":

<p>$$\sigma_{cName="Stanford" \wedge gpa > 3.7 \wedge major = "Computer Science"} Student$$</p>

---
pub_date: 2018-12-13
---
toc: Содержание
